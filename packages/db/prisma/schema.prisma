// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  DEVELOPER
  MARKETER
}

enum FieldType {
  STRING
  RICHTEXT
  INTEGER
  FLOAT
  BOOLEAN
  DATE
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    refresh_token_expires_in Int?
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role Role @default(DEVELOPER)
    projects Project[]
}

model Project {
    id String @id @default(cuid())
    name String
    description String
    users User[]
    collections Collection[]
    pages Page[]
    menus Menu[]
    taxonomies Taxonomy[]
}

model Collection {
    id String @id @default(cuid()) 
    apiId String
    name String
    description String
    models Model[]
    project Project @relation(fields: [projectId], references: [id])
    projectId String 
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Page {
    id String @id @default(cuid()) 
    apiId String
    name String
    description String
    models Model[]
    project Project @relation(fields: [projectId], references: [id])
    projectId String 
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Menu {
    id String @id @default(cuid())
    apiId String
    name String
    description String
    items MenuItem[]
    project Project @relation(fields: [projectId], references: [id])
    projectId String 
}

model MenuItem {
    id String @id @default(cuid())
    apiId String
    name String
    slug String
    menu Menu @relation(fields: [menuId], references: [id])
    menuId String 
}

model Taxonomy {
    id String @id @default(cuid())
    apiId String
    name String
    project Project @relation(fields: [projectId], references: [id])
    projectId String 
}

model Field {
    id String @id @default(cuid()) 
    apiId String
    name String
    description String?
    isRequired Boolean @default(false)
    isUnique Boolean @default(false)
    type FieldType
    component Component? @relation(fields: [componentId], references: [id])
    componentId String? 
    model Model? @relation(fields: [modelId], references: [id])
    modelId String? 
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Model {
    id String @id @default(cuid())
    name String
    fields Field[]
    components Component[]
    page Page? @relation(fields: [pageId], references: [id])
    pageId String? 
    collection Collection? @relation(fields: [collectionId], references: [id])
    collectionId String? 
}

model Component {
    id String @id @default(cuid())
    name String
    description String
    fields Field[]
    model Model? @relation(fields: [modelId], references: [id])
    modelId String? 
}
